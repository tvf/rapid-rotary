{"version":3,"sources":["main.ts"],"names":[],"mappings":";AAUA,SAAS,EACP,EACA,EACA,EACA,GAEM,IAAA,EAAU,KAAK,KAAK,EAAM,EAAI,EAAM,EAAI,EAAM,EAAI,EAAM,GACxD,EAAc,KAAK,MAAM,EAAM,EAAG,EAAM,GAE9C,EAAI,YAEE,IAAA,EAAY,EAAc,EAAmB,EAC7C,EAAW,EAAc,EAAmB,EAElD,EAAI,IAAI,EAAG,EAAG,EAAU,EAAM,EAAU,GAAW,GAEnD,EAAI,IACF,EAAU,KAAK,IAAI,GACnB,EAAU,KAAK,IAAI,GACnB,EACA,EACA,EAAY,KAAK,IACjB,GAGE,EAAU,EAAO,GACnB,EAAI,IAAI,EAAG,EAAG,EAAU,EAAM,EAAW,GAAU,GAGrD,EAAI,IACF,EAAU,KAAK,IAAI,GACnB,EAAU,KAAK,IAAI,GACnB,EACA,EAAW,KAAK,GAChB,GACA,GAIJ,SAAS,EAAY,EAA+B,GAClD,EAAI,iBACJ,EAAI,UAAU,EAAG,EAAG,IAAK,KAEzB,EAAI,UAAU,IAAK,KACnB,EAAI,MAAM,KAAM,KAIT,IAFH,IAAA,EAAI,EACJ,GAAS,EACN,EAAI,GACT,EAAI,UAAY,QAAO,EAAS,IAAM,GAAC,UACvC,EAAoB,EAAK,CAAE,EAAG,GAAK,EAAG,IAAO,EAAG,KAAK,IACrD,EAAI,OACJ,GAAK,IACL,GAAU,EAGZ,EAAI,YACJ,EAAI,IAAI,EAAG,EAAG,EAAG,EAAG,EAAI,KAAK,IAAI,GACjC,EAAI,YAAc,qBAClB,EAAI,UAAY,IAChB,EAAI,SAON,SAAS,IACD,IAMA,EAAuC,SAAS,eACpD,cAIF,EAFuB,EAAkB,WAAW,MAThC,CAClB,MAAO,EACP,EAAG,GACH,EAAG,KAUL,EAAkB,iBAAiB,YAAa,SAAA,GACjC,EAAkB,0BA1FnC","file":"main.04fc11cd.js","sourceRoot":"../src","sourcesContent":["// import { vec2 } from 'gl-matrix';\n\nmain();\n\ninterface XYCTable {\n  x: number;\n  y: number;\n  theta: number;\n}\n\nfunction draw_reachable_zone(\n  ctx: CanvasRenderingContext2D,\n  point: { x: number; y: number },\n  time: number,\n  angular_velocity: number,\n) {\n  const point_r = Math.sqrt(point.x * point.x + point.y * point.y);\n  const point_theta = Math.atan2(point.y, point.x);\n\n  ctx.beginPath();\n\n  const theta_ccw = point_theta + angular_velocity * time;\n  const theta_cw = point_theta - angular_velocity * time;\n\n  ctx.arc(0, 0, point_r + time, theta_cw, theta_ccw, false);\n\n  ctx.arc(\n    point_r * Math.cos(theta_ccw),\n    point_r * Math.sin(theta_ccw),\n    time,\n    theta_ccw,\n    theta_ccw + Math.PI,\n    false,\n  );\n\n  if (point_r - time > 0) {\n    ctx.arc(0, 0, point_r - time, theta_ccw, theta_cw, true);\n  }\n\n  ctx.arc(\n    point_r * Math.cos(theta_cw),\n    point_r * Math.sin(theta_cw),\n    time,\n    theta_cw - Math.PI,\n    theta_cw,\n    false,\n  );\n}\n\nfunction paint_table(ctx: CanvasRenderingContext2D, table: XYCTable) {\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, 480, 480);\n\n  ctx.translate(240, 240);\n  ctx.scale(200, -200);\n\n  let t = 1;\n  let toggle = true;\n  while (t > 0) {\n    ctx.fillStyle = `rgb(${toggle ? 255 : 0}, 0, 0)`;\n    draw_reachable_zone(ctx, { x: 0.3, y: 0.3 }, t, Math.PI);\n    ctx.fill();\n    t -= 0.05;\n    toggle = !toggle;\n  }\n\n  ctx.beginPath();\n  ctx.arc(0, 0, 1, 0, 2 * Math.PI, true);\n  ctx.strokeStyle = 'rgb(255, 255, 255)';\n  ctx.lineWidth = 0.01;\n  ctx.stroke();\n\n  // ctx.lineWidth = draw_radius;\n  // draw_robot_arm(ctx, vec2.fromValues(-0.5, 0), table.alpha);\n  // draw_robot_arm(ctx, vec2.fromValues(0.5, 0), table.alpha_prime);\n}\n\nfunction main() {\n  const table_state = {\n    theta: 0,\n    x: 20,\n    y: 10,\n  };\n\n  const simulation_canvas: HTMLCanvasElement = document.getElementById(\n    'simulation',\n  ) as HTMLCanvasElement;\n  const simulation_ctx = simulation_canvas.getContext('2d');\n\n  paint_table(simulation_ctx, table_state);\n\n  simulation_canvas.addEventListener('mousemove', e => {\n    const rect = simulation_canvas.getBoundingClientRect();\n    // const mousepoint =\n    // drawLine(context, x, y, e.clientX - rect.left, e.clientY - rect.top);\n    // x = e.clientX - rect.left;\n    // y = e.clientY - rect.top;\n  });\n}\n"]}